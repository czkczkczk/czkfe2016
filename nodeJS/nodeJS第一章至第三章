Node.js两大明显优势
  1.性能
  2.使用了 js作为开发语言，开发和学习成本低

第一章 Node.js简介
 1.Node.js是什么
   他不是一种独立的语言，也不是框架
 （1）一个可以让JavaScript运行在服务器端的平台，脱离浏览器的束缚运行在一般服务器下，类似‘PHP’、‘Perl’，Node.js能做的更好。
 （2）Node.js采用了单线程、异步式/O (I/O（input/output），即输入/输出端口),事件驱动式的程序设计模型。
 （3）CommonJS规范
 （4）Node.js的JavaScript引擎是v8，Google chrome的的项目
     号称世界上最快的JavaScript引擎.它的JIT（即时编译）速度接近本地代码的执行速度
 （5）因为Node.js不运行在浏览器上，所以不存在兼容性问题

 2.Node.js能做什么
  (1)JavaScript为客户端而生，Node.js为网络而生
  (2)Node.js自带了HTTP服务器，不需要额外搭建，并且自带 js运行（解析）环境

 3.异步式I/O与事件驱动
  (1)Node.js使用的是单线程模型，对于所有的/O都采用异步式的请求方式
  (2)Node.js为什么快？
    可以这样解释，因为他是单线程的异步的非阻塞式的事件编程模式

 第三章 快速入门
  (1)运行Node.js程序的基本方法就是执行node script.js(script.js是脚本文件名)
  (2)Node.js只有在第一次引用到某部分时才会去解析脚本文件，以后都会直接访问内存，避免重复载入
     而PHP则总是重新读取并解析脚本（如果没有专门的优化配置）。
     Node.js这种性能虽然有利于提高性能，却不利于开发调试
  (3)supervisor会监视你对代码的改动，并自动重启Node.js supervisor这个小工具可以解决开发中的调试问题
  (4)异步式/O或非阻塞式I/O则针对所有I/O操作不采用阻塞的策略，只是将I/O请求发送给操作系统，继续执行下一条语句。
     当操作系统完成I/O操作时，以事件的形式通知执行I/O操作的线程，线程会在特定时候处理这个事件。
     为了处理异步I/O，线程必须有事件循环，不断检查有没有未处理的事件，依次予以处理。

  (5) 异步式I/O （非阻塞式）的特点：
      1.单线程即可实现高吞吐量
      2.通过功能划分利用多核cpu
      3.可以将单进程绑定到单核cpu
      4.可以充分利用cpu资源
      5.内存轨迹小，数据局部性强
      6.不符合传统编程思维

  (6) 回调函数
    在Node.js中异步式I/O是通过回调函数来实现的
  (7)模块
     exports是Node.js自带的一个对象，你可以添加属性和方法
     require（文件）的返回值就是exports
     exports是模块公开的接口，require用于从外部获取一个模块的接口，即所获取模块的exports对象

  (8)创建包
    1. Node.js的包类似于c/c++的函数库或者java/.Net的类库，他将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制
    2. Node.根据CommonJS规范实现了包机制，开发了npm来解决包的发布和获取需求。
    3.Node.js的包就是一个目录 ，其中包含一个JSON格式的包说明文件package.json
     一 严格符合CommonJS规范的包应该具备以下特征：
         （1）package.json必须在包的顶层目录下
         （2）二进制文件应该在bin目录下：
                    (ps:广义的二进制文件即指文件，由文件在外部设备的存放形式为二进制而得名)

                    (ps:计算机文件基本分为两种：二进制文件和ASCII（也称纯文本文件）;
                    图形文字及文字处理程序等计算机程序都属于二进制文件，这些文件含有特殊的格式及计算机代码;
                    ASCII 则是可以用任何文字处理程序阅读的简单文本文件。)
         (3)JavaScript代码应该在lib目录下： （ps：bin 目录是 Web 应用程序的默认程序集缓存，bin 目录通常存放 DLL 文件；
                                                 bin 目录必须位于网站根目录或虚拟目录根目录之下，位于普通目录之下无效。）
         (4)文档应该在doc目录下
         (5)单元测试应该在test目录下
     二 但是Node.js对包的要求并没有这么严格，只要顶层目录下有package.json，并符合一些规范即可。
        当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守CommonJS规范。

    4.作为文件夹的模块
       模块与文件是一一对应的，文件不仅可以是JavaScript代码或二进制代码，还可以是一个文件夹
       (1)最简单的包就是一个作为文件夹的模块
       (2)包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库，通过定制package.json，我们创建更复杂，完善的符合规范的包
    5.package.json
       Node.js在调用某个包时，会首先检查包中package.json文件的main字段，将其作为包的接口模块；
       如果package.json或main字段不存在。会尝试寻找index.js或index.node作为包的接口
     (1)package.json是CommonJS规定的用来描述包的文件，完全符合规范的package.json文件应含有一下字段。
           1.name：包的名称，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格
           2.description：包的简要说明
           3.version（版本）：符合语义化版本识别规范的版本字符串。
           4.keywords：关键字数组，通常用于搜索。
           5.maintainers:维护者数组，每个元素要包含name、email（可选）、web（可选）字段。
           6.contributors:贡献者数组，格式与maintainers相同。包的作者应该是贡献者数组的第一个元素 。
           7.bugs:提交bug的地址，可以是网址或者电子邮件地址。
           8.licenses:许可证数组，每个元素要包含type（许可证的名称）和url（链接到许可证文本的地址）字段
           9.dependencies（依赖）：包的依赖，一个关联数组，由包名称和版本号组成。
    6.Node.js包管理器
       npm是Node.js官方提供的包管理工具，他已经成为Node.js包的标准发布平台，用于Node.js包的发布、传播、依赖控制。
       npm提供了命令行工具，是你可以方便的下载、安装、升级、删除包，
      1.获取一个包
